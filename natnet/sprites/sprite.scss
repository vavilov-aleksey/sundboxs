// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-header-name: 'icon-header';
$icon-header-x: 0px;
$icon-header-y: 91px;
$icon-header-offset-x: 0px;
$icon-header-offset-y: -91px;
$icon-header-width: 65px;
$icon-header-height: 69px;
$icon-header-total-width: 238px;
$icon-header-total-height: 160px;
$icon-header-image: 'sprite.png';
$icon-header: (0px, 91px, 0px, -91px, 65px, 69px, 238px, 160px, 'sprite.png', 'icon-header', );
$icon-header2-name: 'icon-header2';
$icon-header2-x: 65px;
$icon-header2-y: 91px;
$icon-header2-offset-x: -65px;
$icon-header2-offset-y: -91px;
$icon-header2-width: 23px;
$icon-header2-height: 37px;
$icon-header2-total-width: 238px;
$icon-header2-total-height: 160px;
$icon-header2-image: 'sprite.png';
$icon-header2: (65px, 91px, -65px, -91px, 23px, 37px, 238px, 160px, 'sprite.png', 'icon-header2', );
$icon1-name: 'icon1';
$icon1-x: 79px;
$icon1-y: 0px;
$icon1-offset-x: -79px;
$icon1-offset-y: 0px;
$icon1-width: 80px;
$icon1-height: 83px;
$icon1-total-width: 238px;
$icon1-total-height: 160px;
$icon1-image: 'sprite.png';
$icon1: (79px, 0px, -79px, 0px, 80px, 83px, 238px, 160px, 'sprite.png', 'icon1', );
$icon2-name: 'icon2';
$icon2-x: 159px;
$icon2-y: 0px;
$icon2-offset-x: -159px;
$icon2-offset-y: 0px;
$icon2-width: 79px;
$icon2-height: 76px;
$icon2-total-width: 238px;
$icon2-total-height: 160px;
$icon2-image: 'sprite.png';
$icon2: (159px, 0px, -159px, 0px, 79px, 76px, 238px, 160px, 'sprite.png', 'icon2', );
$icon3-name: 'icon3';
$icon3-x: 0px;
$icon3-y: 0px;
$icon3-offset-x: 0px;
$icon3-offset-y: 0px;
$icon3-width: 79px;
$icon3-height: 91px;
$icon3-total-width: 238px;
$icon3-total-height: 160px;
$icon3-image: 'sprite.png';
$icon3: (0px, 0px, 0px, 0px, 79px, 91px, 238px, 160px, 'sprite.png', 'icon3', );
$spritesheet-width: 238px;
$spritesheet-height: 160px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($icon-header, $icon-header2, $icon1, $icon2, $icon3, );
$spritesheet: (238px, 160px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(../sprites/#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
